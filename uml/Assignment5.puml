@startuml

class InventoryTracker {
    start()
    main()
}

class SceneManager {
    scenes: Map<String, Scene>

    load()
    getScene(String): Scene
}

class MainWindowController {
    items: ItemModel
    scenes: SceneManager
    fileManager: FileManager

    + MainWindowController(ItemModel, SceneManager)

    addItemButtonClicked(EventHandler)
    editItemButtonClicked(EventHandler)
    removeItemButtonClicked(EventHandler)
    saveInventoryAsCSVButtonClicked(EventHandler)
    saveInventoryAsHTMLButtonClicked(EventHandler)
    saveInventoryAsJSONButtonClicked(EventHandler)

    addItem(String, String, BigDecimal)
    editItem()
    saveInventoryAsCSV(filename: String)
    saveInventoryAsHTML(filename: String)
    saveInventoryAsJSON(filename: String)
}

class AddItemWindowController {
    - valueField: TextField
    - serialNumberField: TextField
    - nameField: TextField
    - errorLabel: Label
    - model: ItemModel
    - sceneManager: SceneManager

    <<constructor>> AddItemWindowController(ItemModel, SceneManager)

    cancelClicked(ActionEvent): void
    confirmClicked(ActionEvent): void

    - clearFields(): void
}

class ItemModel {
    - ObservableList<Item>
}

class Item {
    - name: SimpleStringProperty
    - serialNumber: SimpleStringProperty
    - value: SimpleDoubleProperty

    + getName()
    + setName()
    + nameProperty()
    + getSerialNumber()
}

class FileManager {
    saveAsCSV(filename: String, data: String)
    saveAsJSON(filename: String, data: String)
    saveAsHTML(filename: String, data: String)
}

openjfx.org.Application <|-- InventoryTracker
InventoryTracker - SceneManager
SceneManager -- MainWindowController
SceneManager -- AddItemWindowController
MainWindowController o-- ItemModel
AddItemWindowController o-- ItemModel
ItemModel *-- Item
MainWindowController o-- FileManager
@enduml